//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskList", Namespace="http://schemas.datacontract.org/2004/07/_2DO_Server.Database.Data")]
    public partial class TaskList : object
    {
        
        private string CommentField;
        
        private string DescriptionField;
        
        private int IDField;
        
        private int VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this.CommentField;
            }
            set
            {
                this.CommentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/_2DO_Server.Database.Data")]
    public partial class Task : object
    {
        
        private string CommentField;
        
        private System.DateTime CreationDateField;
        
        private string DescriptionField;
        
        private System.DateTime DueDateField;
        
        private int IDField;
        
        private int PriorityField;
        
        private int ReminderMinutesField;
        
        private bool StateField;
        
        private int TasklistIDField;
        
        private int VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this.CommentField;
            }
            set
            {
                this.CommentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate
        {
            get
            {
                return this.CreationDateField;
            }
            set
            {
                this.CreationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate
        {
            get
            {
                return this.DueDateField;
            }
            set
            {
                this.DueDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority
        {
            get
            {
                return this.PriorityField;
            }
            set
            {
                this.PriorityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReminderMinutes
        {
            get
            {
                return this.ReminderMinutesField;
            }
            set
            {
                this.ReminderMinutesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TasklistID
        {
            get
            {
                return this.TasklistIDField;
            }
            set
            {
                this.TasklistIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Categorie", Namespace="http://schemas.datacontract.org/2004/07/_2DO_Server.Database.Data")]
    public partial class Categorie : object
    {
        
        private int IDField;
        
        private string NameField;
        
        private int VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IToDoService")]
    public interface IToDoService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/InitNHibernate", ReplyAction="http://tempuri.org/IToDoService/InitNHibernateResponse")]
        bool InitNHibernate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/InitNHibernate", ReplyAction="http://tempuri.org/IToDoService/InitNHibernateResponse")]
        System.Threading.Tasks.Task<bool> InitNHibernateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/AddTaskList", ReplyAction="http://tempuri.org/IToDoService/AddTaskListResponse")]
        bool AddTaskList(ServiceReference1.TaskList taskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/AddTaskList", ReplyAction="http://tempuri.org/IToDoService/AddTaskListResponse")]
        System.Threading.Tasks.Task<bool> AddTaskListAsync(ServiceReference1.TaskList taskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/RemoveLTaskist", ReplyAction="http://tempuri.org/IToDoService/RemoveLTaskistResponse")]
        bool RemoveLTaskist(ServiceReference1.TaskList taskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/RemoveLTaskist", ReplyAction="http://tempuri.org/IToDoService/RemoveLTaskistResponse")]
        System.Threading.Tasks.Task<bool> RemoveLTaskistAsync(ServiceReference1.TaskList taskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/GetAllTaskLists", ReplyAction="http://tempuri.org/IToDoService/GetAllTaskListsResponse")]
        ServiceReference1.TaskList[] GetAllTaskLists();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/GetAllTaskLists", ReplyAction="http://tempuri.org/IToDoService/GetAllTaskListsResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TaskList[]> GetAllTaskListsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/AddTask", ReplyAction="http://tempuri.org/IToDoService/AddTaskResponse")]
        bool AddTask(ServiceReference1.Task customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/AddTask", ReplyAction="http://tempuri.org/IToDoService/AddTaskResponse")]
        System.Threading.Tasks.Task<bool> AddTaskAsync(ServiceReference1.Task customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/RemoveTask", ReplyAction="http://tempuri.org/IToDoService/RemoveTaskResponse")]
        bool RemoveTask(ServiceReference1.Task customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/RemoveTask", ReplyAction="http://tempuri.org/IToDoService/RemoveTaskResponse")]
        System.Threading.Tasks.Task<bool> RemoveTaskAsync(ServiceReference1.Task customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/GetAllTasks", ReplyAction="http://tempuri.org/IToDoService/GetAllTasksResponse")]
        ServiceReference1.Task[] GetAllTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/GetAllTasks", ReplyAction="http://tempuri.org/IToDoService/GetAllTasksResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Task[]> GetAllTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/AddCategorie", ReplyAction="http://tempuri.org/IToDoService/AddCategorieResponse")]
        bool AddCategorie(ServiceReference1.Categorie customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/AddCategorie", ReplyAction="http://tempuri.org/IToDoService/AddCategorieResponse")]
        System.Threading.Tasks.Task<bool> AddCategorieAsync(ServiceReference1.Categorie customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/RemoveCategorie", ReplyAction="http://tempuri.org/IToDoService/RemoveCategorieResponse")]
        bool RemoveCategorie(ServiceReference1.Categorie customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/RemoveCategorie", ReplyAction="http://tempuri.org/IToDoService/RemoveCategorieResponse")]
        System.Threading.Tasks.Task<bool> RemoveCategorieAsync(ServiceReference1.Categorie customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/GetAllCategories", ReplyAction="http://tempuri.org/IToDoService/GetAllCategoriesResponse")]
        ServiceReference1.Categorie[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToDoService/GetAllCategories", ReplyAction="http://tempuri.org/IToDoService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Categorie[]> GetAllCategoriesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IToDoServiceChannel : ServiceReference1.IToDoService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ToDoServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IToDoService>, ServiceReference1.IToDoService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ToDoServiceClient() : 
                base(ToDoServiceClient.GetDefaultBinding(), ToDoServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IToDoService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ToDoServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ToDoServiceClient.GetBindingForEndpoint(endpointConfiguration), ToDoServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ToDoServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ToDoServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ToDoServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ToDoServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ToDoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool InitNHibernate()
        {
            return base.Channel.InitNHibernate();
        }
        
        public System.Threading.Tasks.Task<bool> InitNHibernateAsync()
        {
            return base.Channel.InitNHibernateAsync();
        }
        
        public bool AddTaskList(ServiceReference1.TaskList taskList)
        {
            return base.Channel.AddTaskList(taskList);
        }
        
        public System.Threading.Tasks.Task<bool> AddTaskListAsync(ServiceReference1.TaskList taskList)
        {
            return base.Channel.AddTaskListAsync(taskList);
        }
        
        public bool RemoveLTaskist(ServiceReference1.TaskList taskList)
        {
            return base.Channel.RemoveLTaskist(taskList);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveLTaskistAsync(ServiceReference1.TaskList taskList)
        {
            return base.Channel.RemoveLTaskistAsync(taskList);
        }
        
        public ServiceReference1.TaskList[] GetAllTaskLists()
        {
            return base.Channel.GetAllTaskLists();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TaskList[]> GetAllTaskListsAsync()
        {
            return base.Channel.GetAllTaskListsAsync();
        }
        
        public bool AddTask(ServiceReference1.Task customer)
        {
            return base.Channel.AddTask(customer);
        }
        
        public System.Threading.Tasks.Task<bool> AddTaskAsync(ServiceReference1.Task customer)
        {
            return base.Channel.AddTaskAsync(customer);
        }
        
        public bool RemoveTask(ServiceReference1.Task customer)
        {
            return base.Channel.RemoveTask(customer);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTaskAsync(ServiceReference1.Task customer)
        {
            return base.Channel.RemoveTaskAsync(customer);
        }
        
        public ServiceReference1.Task[] GetAllTasks()
        {
            return base.Channel.GetAllTasks();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Task[]> GetAllTasksAsync()
        {
            return base.Channel.GetAllTasksAsync();
        }
        
        public bool AddCategorie(ServiceReference1.Categorie customer)
        {
            return base.Channel.AddCategorie(customer);
        }
        
        public System.Threading.Tasks.Task<bool> AddCategorieAsync(ServiceReference1.Categorie customer)
        {
            return base.Channel.AddCategorieAsync(customer);
        }
        
        public bool RemoveCategorie(ServiceReference1.Categorie customer)
        {
            return base.Channel.RemoveCategorie(customer);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCategorieAsync(ServiceReference1.Categorie customer)
        {
            return base.Channel.RemoveCategorieAsync(customer);
        }
        
        public ServiceReference1.Categorie[] GetAllCategories()
        {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Categorie[]> GetAllCategoriesAsync()
        {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IToDoService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IToDoService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/2DO-Service/Test");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ToDoServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IToDoService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ToDoServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IToDoService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IToDoService,
        }
    }
}
